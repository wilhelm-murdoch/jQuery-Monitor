# jQuery Monitor Plugin

DEMO: http://area51.thedrunkenepic.com/monitor/

This plugin can be used to monitor structural changes in elements which match the specified selector.

## Enable Monitoring

To enable monitoring of, say, all `<h3>` header elements within `div#headerWrapper`, you would simply do:
	
	$('div#headerWrapper h3').monitor({
		onChange: function(from, to, intervalId) {
			// place code here which does something once a matched element has changed
		}
	});

This simply enables the monitoring effect. However, there are a few options you may include when enabling this plugin:

	$('img').wiggle('start', {
		limit: null,
		interval: 500,
		onChange: function(from, to, intervalId) {
			// place code here which does something once a matched element has changed
		}
	});

Note the values displayed above are default for this plugin.

1. `limit` allows you to specify a limit to the number of polling intervals. Defaults to `null` which causes persistent monitoring.
2. `interval` allows you to specify the timing of each polling interval in milliseconds. Defaults to `100`, which is every tenth of a second.
3. `onChange` an event that is fired off when a structural change has been detected. Provides changes in the form of `from`, which is the original HTML structure before the change, and `to` which contains the latest HTML. A third parameter is included in this callback, which is the `intervalId` associated with the monitoring of the current element. This allows you to stop monitoring at any time for that particular element.

## Disable Monitoring

At the moment, you can only stop monitoring an element once a change has taken place. Here is how:

	$('div#headerWrapper h3').monitor({
		onChange: function(from, to, intervalId) {
			clearInterval(intervalId);
		}
	});

## Caveats

1. Some versions of IE don't like really small polling intervals. Try to keep the `interval` value no lower than `500` milliseconds.
2. This is more along the lines of a proof-of-concept plugin, so don't be surprised if it isn't 100% stable in all cases.
3. This is an experimental plugin, so bear with me. Also, pull requests are always MORE than welcome!
4. Since this plugin actually monitors the state of a DOM element's HTML output, this process can become quite intensive for very large documents. 